// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/projects/": {
            "get": {
                "description": "Get a list of projects associated with the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get projects associated with the authenticated user",
                "responses": {
                    "200": {
                        "description": "List of projects",
                        "schema": {
                            "$ref": "#/definitions/controls.Result"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch projects",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new project and assign members to it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project details",
                        "name": "projectInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.UserEnterData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created project details",
                        "schema": {
                            "$ref": "#/definitions/controls.Result2"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create project",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}": {
            "put": {
                "description": "Edit the name of a project with the specified ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Edit a project's name",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the project to edit",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New project name",
                        "name": "projectInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.InputData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the project",
                        "schema": {
                            "$ref": "#/definitions/controls.EditedProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update project",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a project with the specified ID, including its members and bugs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the project to delete",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletion confirmation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or project ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/bugs": {
            "get": {
                "description": "Get all bugs in a project with the specified project ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bugs"
                ],
                "summary": "Get all bugs in a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the project to fetch bugs from",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of bugs in the project",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controls.BugDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID, project ID, or request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Access is denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch bugs",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new bug in a project with the specified project ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bugs"
                ],
                "summary": "Create a new bug in a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the project to create the bug in",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bug details",
                        "name": "bugRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.BugRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created bug details",
                        "schema": {
                            "$ref": "#/definitions/controls.BugDTO1"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID, project ID, or request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Access is denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create bug",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/bugs/{bugId}": {
            "put": {
                "description": "Update a bug in a project with the specified project and bug IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bugs"
                ],
                "summary": "Update a bug in a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the project containing the bug",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the bug to update",
                        "name": "bugId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated bug details",
                        "name": "bugUpdateData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.BugUpdateData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated bug details",
                        "schema": {
                            "$ref": "#/definitions/controls.BugDTO3"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID, project ID, bug ID, or request data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Access is denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to update bug",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a bug by bug ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bugs"
                ],
                "summary": "Delete a bug",
                "operationId": "delete-bug",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Bug ID",
                        "name": "bugId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/bugs/{bugId}/close": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Close a bug by bug ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bugs"
                ],
                "summary": "Close a bug",
                "operationId": "close-bug",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Bug ID",
                        "name": "bugId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Closed bug",
                        "schema": {
                            "$ref": "#/definitions/controls.BugDTO4"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/bugs/{bugId}/notes": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new note for a bug",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notes"
                ],
                "summary": "Create a new note",
                "operationId": "create-note",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Bug ID",
                        "name": "bugId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Note details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.requestBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created note",
                        "schema": {
                            "$ref": "#/definitions/controls.NoteDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/bugs/{bugId}/reopen": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reopen a bug by bug ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bugs"
                ],
                "summary": "Reopen a bug",
                "operationId": "reopen-bug",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Bug ID",
                        "name": "bugId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reopened bug",
                        "schema": {
                            "$ref": "#/definitions/controls.BugDTO5"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/members": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add members to a project by project ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Add members to a project",
                "operationId": "add-project-members",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member IDs",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Added members",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controls.MemberDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/members/leave": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Leave a project as a member by project ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Leave a project as a member",
                "operationId": "leave-project-as-member",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/members/{memberId}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a member from a project by project ID and member ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Remove a project member",
                "operationId": "remove-project-member",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Member ID",
                        "name": "memberId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/notes/{noteId}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a note by note ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notes"
                ],
                "summary": "Update a note",
                "operationId": "update-note",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Note details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.requestBody1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated note",
                        "schema": {
                            "$ref": "#/definitions/controls.NoteDTO1"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a note by note ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notes"
                ],
                "summary": "Delete a note",
                "operationId": "delete-note",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Note ID",
                        "name": "noteId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/forgotpassword": {
            "put": {
                "description": "Generate OTP for the user's forgot password request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Generate OTP for forgot password",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.UserEnterData2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Data binding error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/forgotpassword/changepassword": {
            "post": {
                "description": "Change a user's password by providing the email, OTP, and new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user's password",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.userEnterData1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid OTP",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Log in a user with the provided email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.userData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Password is incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "description": "Log out a user by clearing the authentication cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Log out a user",
                "responses": {
                    "200": {
                        "description": "User Successfully Log Out",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "description": "Create a new user with the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.checkUserData"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Go to /signup/otpvalidate",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Data binding error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User already Exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/userchangepassword": {
            "post": {
                "description": "Change a user's password by providing the current password and the new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change a user's password",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "userEnterData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.checkUserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Password is incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error in string conversion",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/userchangepassword/updatepassword": {
            "post": {
                "description": "Update a user's password by providing the user's current password and the new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user's password",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "userEnterData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controls.checkUserData"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully updated password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error in string conversion",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "User not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/users": {
            "get": {
                "description": "Get a list of all users except the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users except the authenticated user",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "$ref": "#/definitions/controls.UsersDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controls.BugDTO": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer"
                },
                "author_user_name": {
                    "type": "string"
                },
                "closed_at": {
                    "type": "string"
                },
                "closed_by_id": {
                    "type": "integer"
                },
                "closed_by_user_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "created_by_user_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "note_body": {
                    "description": "BugID              uint      ` + "`" + `json:\"bug_id\" gorm:\"column:id\"` + "`" + `",
                    "type": "string"
                },
                "note_created_at": {
                    "type": "string"
                },
                "note_id": {
                    "type": "integer"
                },
                "note_updated_at": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reopened_at": {
                    "type": "string"
                },
                "reopened_by_id": {
                    "type": "integer"
                },
                "reopened_by_user_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "updated_by_user_name": {
                    "type": "string"
                }
            }
        },
        "controls.BugDTO1": {
            "type": "object",
            "properties": {
                "author_user": {
                    "type": "string"
                },
                "author_user_id": {
                    "type": "integer"
                },
                "closed_at": {
                    "type": "string"
                },
                "closed_by_id": {
                    "type": "integer"
                },
                "closed_by_user_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "created_by_user_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "note_body": {
                    "description": "BugID              uint      ` + "`" + `json:\"bug_id\" gorm:\"column:id\"` + "`" + `",
                    "type": "string"
                },
                "note_created_at": {
                    "type": "string"
                },
                "note_id": {
                    "type": "integer"
                },
                "note_updated_at": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reopened_at": {
                    "type": "string"
                },
                "reopened_by_id": {
                    "type": "integer"
                },
                "reopened_by_user_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "updated_by_user_name": {
                    "type": "string"
                }
            }
        },
        "controls.BugDTO3": {
            "type": "object",
            "properties": {
                "author_user": {
                    "type": "string"
                },
                "author_user_id": {
                    "type": "integer"
                },
                "closed_at": {
                    "type": "string"
                },
                "closed_by_id": {
                    "type": "integer"
                },
                "closed_by_user_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "created_by_user_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "note_body": {
                    "description": "BugID              uint      ` + "`" + `json:\"bug_id\" gorm:\"column:id\"` + "`" + `",
                    "type": "string"
                },
                "note_created_at": {
                    "type": "string"
                },
                "note_id": {
                    "type": "integer"
                },
                "note_updated_at": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reopened_at": {
                    "type": "string"
                },
                "reopened_by_id": {
                    "type": "integer"
                },
                "reopened_by_user_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "updated_by_user_name": {
                    "type": "string"
                }
            }
        },
        "controls.BugDTO4": {
            "type": "object",
            "properties": {
                "author_user": {
                    "type": "string"
                },
                "author_user_id": {
                    "type": "integer"
                },
                "closed_at": {
                    "type": "string"
                },
                "closed_by_id": {
                    "type": "integer"
                },
                "closed_by_user_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "created_by_user_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "note_body": {
                    "description": "BugID              uint      ` + "`" + `json:\"bug_id\" gorm:\"column:id\"` + "`" + `",
                    "type": "string"
                },
                "note_created_at": {
                    "type": "string"
                },
                "note_id": {
                    "type": "integer"
                },
                "note_updated_at": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reopened_at": {
                    "type": "string"
                },
                "reopened_by_id": {
                    "type": "integer"
                },
                "reopened_by_user_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "updated_by_user_name": {
                    "type": "string"
                }
            }
        },
        "controls.BugDTO5": {
            "type": "object",
            "properties": {
                "author_user": {
                    "type": "string"
                },
                "author_user_id": {
                    "type": "integer"
                },
                "closed_at": {
                    "type": "string"
                },
                "closed_by_id": {
                    "type": "integer"
                },
                "closed_by_user_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "created_by_user_name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_resolved": {
                    "type": "boolean"
                },
                "note_body": {
                    "description": "BugID              uint      ` + "`" + `json:\"bug_id\" gorm:\"column:id\"` + "`" + `",
                    "type": "string"
                },
                "note_created_at": {
                    "type": "string"
                },
                "note_id": {
                    "type": "integer"
                },
                "note_updated_at": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reopened_at": {
                    "type": "string"
                },
                "reopened_by_id": {
                    "type": "integer"
                },
                "reopened_by_user_name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by_id": {
                    "type": "integer"
                },
                "updated_by_user_name": {
                    "type": "string"
                }
            }
        },
        "controls.BugRequest": {
            "type": "object",
            "required": [
                "description",
                "priority",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controls.BugUpdateData": {
            "type": "object",
            "required": [
                "description",
                "priority",
                "title"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controls.EditedProjectResponse": {
            "type": "object",
            "properties": {
                "Message": {
                    "type": "string"
                },
                "Updated Project": {
                    "$ref": "#/definitions/controls.Project"
                }
            }
        },
        "controls.InputData": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "controls.MemberDTO": {
            "type": "object",
            "properties": {
                "joined_at": {
                    "type": "string"
                },
                "member_id": {
                    "type": "integer"
                },
                "member_user_name": {
                    "type": "string"
                },
                "members_id": {
                    "type": "integer"
                }
            }
        },
        "controls.NoteDTO": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer"
                },
                "author_user_name": {
                    "type": "string"
                },
                "bug_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "note_body": {
                    "type": "string"
                },
                "note_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "controls.NoteDTO1": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer"
                },
                "author_user_name": {
                    "type": "string"
                },
                "bug_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "note_body": {
                    "type": "string"
                },
                "note_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "controls.Project": {
            "type": "object",
            "properties": {
                "Created At": {
                    "type": "string"
                },
                "Project ID": {
                    "type": "integer"
                },
                "Project Name": {
                    "type": "string"
                },
                "Updated At": {
                    "type": "string"
                }
            }
        },
        "controls.Result": {
            "type": "object",
            "properties": {
                "bugID": {
                    "description": "Rename this field to match the column name",
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdByID": {
                    "type": "integer"
                },
                "createdByUserName": {
                    "description": "Rename this field to match the column name",
                    "type": "string"
                },
                "joinedAt": {
                    "description": "Rename this field to match the column name",
                    "type": "string"
                },
                "memberID": {
                    "description": "Rename this field to match the column name",
                    "type": "integer"
                },
                "memberUserID": {
                    "description": "Rename this field to match the column name",
                    "type": "integer"
                },
                "memberUserName": {
                    "description": "Rename this field to match the column name",
                    "type": "string"
                },
                "projectID": {
                    "type": "integer"
                },
                "projectName": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "controls.Result2": {
            "type": "object",
            "properties": {
                "bugID": {
                    "description": "Rename this field to match the column name",
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdByID": {
                    "description": "Rename this field to match the column name",
                    "type": "integer"
                },
                "createdByUserName": {
                    "description": "Rename this field to match the column name",
                    "type": "string"
                },
                "joinedAt": {
                    "description": "Rename this field to match the column name",
                    "type": "string"
                },
                "memberID": {
                    "description": "Rename this field to match the column name",
                    "type": "integer"
                },
                "memberUserID": {
                    "description": "Rename this field to match the column name",
                    "type": "integer"
                },
                "memberUserName": {
                    "description": "Rename this field to match the column name",
                    "type": "string"
                },
                "projectID": {
                    "type": "integer"
                },
                "projectName": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "controls.UserEnterData": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controls.UserEnterData2": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "controls.UsersDTO": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "controls.checkUserData": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "controls.request": {
            "type": "object",
            "required": [
                "members"
            ],
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "controls.requestBody": {
            "type": "object",
            "required": [
                "body"
            ],
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        },
        "controls.requestBody1": {
            "type": "object",
            "required": [
                "body"
            ],
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        },
        "controls.userData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "controls.userEnterData1": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
